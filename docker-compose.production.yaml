version: '3'

name: message-service-production

services:
  message-service-db:
    extends:
      file: docker-compose.common.yaml
      service: postgresql

    container_name: message-service-db
    environment:
      POSTGRES_USER: message
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}

  kafka0:
    extends:
      file: docker-compose.common.yaml
      service: kafka

    container_name: kafka
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka0:9092
      KAFKA_NODE_ID: 1
      KAFKA_CFG_BROKER_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka0:9093
      KAFKA_KRAFT_CLUSTER_ID: 18749a1a-ee99-4004-8c73-855ae4b4acf5
      ALLOW_PLAINTEXT_LISTENER: yes

  kafka-init-topics:
    extends:
      file: docker-compose.common.yaml
      service: kafka-confluentinc

    depends_on:
      kafka0:
        condition: service_started
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
      cub kafka-ready -b kafka0:9092 1 30 && \
      kafka-topics --create --topic processing-messages --partitions 1 --replication-factor 1 --if-not-exists --bootstrap-server kafka0:9092'"

  kafka-ui:
    extends:
      file: docker-compose.common.yaml
      service: kafka-ui

    container_name: kafka-ui
    depends_on:
      kafka0:
        condition: service_started
    environment:
      KAFKA_CLUSTERS_0_NAME: message-service-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka0:9092
      KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: 'true'
      KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: 'true'

  message-service:
    extends:
      file: docker-compose.common.yaml
      service: message-service

    container_name: message-service
    image: message-service
    restart: on-failure
    depends_on:
      message-service-db:
        condition: service_started
      kafka0:
        condition: service_started
      kafka-init-topics:
        condition: service_completed_successfully
    environment:
      CONFIG_PATH: /app/config/production.yaml
      REST_PORT: 8081
      DB_HOST: message-service-db
      DB_USER: message
      DB_PASSWORD: ${DATABASE_PASSWORD}
      DB_NAME: message
      KAFKA_BROKERS: kafka0:9092
      KAFKA_TOPIC_PROCESSING_MESSAGES: processing-messages
      KAFKA_TOPIC_PROCESSED_MESSAGES: processing-messages
      GIN_MODE: release
